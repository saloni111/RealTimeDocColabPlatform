// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/collaboration.proto

package collaboration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollaborationService_JoinDocument_FullMethodName  = "/collaboration.CollaborationService/JoinDocument"
	CollaborationService_SyncChanges_FullMethodName   = "/collaboration.CollaborationService/SyncChanges"
	CollaborationService_LeaveDocument_FullMethodName = "/collaboration.CollaborationService/LeaveDocument"
)

// CollaborationServiceClient is the client API for CollaborationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollaborationServiceClient interface {
	JoinDocument(ctx context.Context, in *JoinDocumentRequest, opts ...grpc.CallOption) (*JoinDocumentResponse, error)
	SyncChanges(ctx context.Context, in *SyncChangesRequest, opts ...grpc.CallOption) (*SyncChangesResponse, error)
	LeaveDocument(ctx context.Context, in *LeaveDocumentRequest, opts ...grpc.CallOption) (*LeaveDocumentResponse, error)
}

type collaborationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollaborationServiceClient(cc grpc.ClientConnInterface) CollaborationServiceClient {
	return &collaborationServiceClient{cc}
}

func (c *collaborationServiceClient) JoinDocument(ctx context.Context, in *JoinDocumentRequest, opts ...grpc.CallOption) (*JoinDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinDocumentResponse)
	err := c.cc.Invoke(ctx, CollaborationService_JoinDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) SyncChanges(ctx context.Context, in *SyncChangesRequest, opts ...grpc.CallOption) (*SyncChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncChangesResponse)
	err := c.cc.Invoke(ctx, CollaborationService_SyncChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collaborationServiceClient) LeaveDocument(ctx context.Context, in *LeaveDocumentRequest, opts ...grpc.CallOption) (*LeaveDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveDocumentResponse)
	err := c.cc.Invoke(ctx, CollaborationService_LeaveDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollaborationServiceServer is the server API for CollaborationService service.
// All implementations must embed UnimplementedCollaborationServiceServer
// for forward compatibility.
type CollaborationServiceServer interface {
	JoinDocument(context.Context, *JoinDocumentRequest) (*JoinDocumentResponse, error)
	SyncChanges(context.Context, *SyncChangesRequest) (*SyncChangesResponse, error)
	LeaveDocument(context.Context, *LeaveDocumentRequest) (*LeaveDocumentResponse, error)
	mustEmbedUnimplementedCollaborationServiceServer()
}

// UnimplementedCollaborationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollaborationServiceServer struct{}

func (UnimplementedCollaborationServiceServer) JoinDocument(context.Context, *JoinDocumentRequest) (*JoinDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinDocument not implemented")
}
func (UnimplementedCollaborationServiceServer) SyncChanges(context.Context, *SyncChangesRequest) (*SyncChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncChanges not implemented")
}
func (UnimplementedCollaborationServiceServer) LeaveDocument(context.Context, *LeaveDocumentRequest) (*LeaveDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveDocument not implemented")
}
func (UnimplementedCollaborationServiceServer) mustEmbedUnimplementedCollaborationServiceServer() {}
func (UnimplementedCollaborationServiceServer) testEmbeddedByValue()                              {}

// UnsafeCollaborationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollaborationServiceServer will
// result in compilation errors.
type UnsafeCollaborationServiceServer interface {
	mustEmbedUnimplementedCollaborationServiceServer()
}

func RegisterCollaborationServiceServer(s grpc.ServiceRegistrar, srv CollaborationServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollaborationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollaborationService_ServiceDesc, srv)
}

func _CollaborationService_JoinDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).JoinDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_JoinDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).JoinDocument(ctx, req.(*JoinDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_SyncChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).SyncChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_SyncChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).SyncChanges(ctx, req.(*SyncChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollaborationService_LeaveDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollaborationServiceServer).LeaveDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CollaborationService_LeaveDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollaborationServiceServer).LeaveDocument(ctx, req.(*LeaveDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollaborationService_ServiceDesc is the grpc.ServiceDesc for CollaborationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollaborationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "collaboration.CollaborationService",
	HandlerType: (*CollaborationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinDocument",
			Handler:    _CollaborationService_JoinDocument_Handler,
		},
		{
			MethodName: "SyncChanges",
			Handler:    _CollaborationService_SyncChanges_Handler,
		},
		{
			MethodName: "LeaveDocument",
			Handler:    _CollaborationService_LeaveDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/collaboration.proto",
}
